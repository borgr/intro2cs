palindrome = [('is_two_palindrome', [''],{},True),
              ('is_two_palindrome', ['a'],{},True),
              ('is_two_palindrome', ['zzaa'],{},True),
              ('is_two_palindrome', ['aabaa'],{},True),
              ('is_two_palindrome', ['zwwz'],{},False),
              ('is_two_palindrome', ['bvv'],{},True),
              ('is_two_palindrome', ['zwzata'],{},True),
              ('is_two_palindrome', ['zwzkata'],{},True),
              ('is_two_palindrome', ['b '],{},True),
              ('is_two_palindrome', ['abbc'],{},False),
              ('is_two_palindrome', ['avva'],{},False),
              ('is_two_palindrome', ['\'\'\'\''],{},True),
              ('is_two_palindrome', ['"\'\'"'],{},False),
              ('is_two_palindrome', ['\'"\'"'],{},False),
              ('is_two_palindrome', ['\'\'"'],{},True),
              ('is_two_palindrome', ['12332100123321'],{},False),
              ('is_two_palindrome', ['Ababab'],{},False),
              ('is_two_palindrome', ['ababaB'],{},False),
              ('is_two_palindrome', ['abABab'],{},False),
              ('is_two_palindrome', ['123456789'],{},False),
              ('is_two_palindrome', ['w!P,X!BM,]!"1&6&1"!],MB!X,P!w]>Ie|]Ce~QX`S~>~S`XQ~eC]|eI>]'], {}, True),
              ('is_two_palindrome', ['FJ!V/Bz4e{]4q9>9q4]{e4zB.V!JFnNfn?Far%U1>h_#_h>1U%saF?nfNn'], {}, False),
              ('is_two_palindrome', ['8P*{{$&*9Tvc=]J]=cvU9*&${{*P8];jr\\V!IdMoob(!(booMdI!V\\rj;]'], {}, False),
              ('is_two_palindrome', ['~Dn"Lp792Bj"MM/MM"jB297pL"nD~Moa;a8>/;CWe*NQN+eWC;/>8a;aoM'], {}, False),
              ('is_two_palindrome', ['sDD?SWjc6+%Hu%E%uH%+6cjWS?DDsE5l0?}yH+6T$F+I+F$T6+Hy}?0l5E'], {}, True),
              ('is_two_palindrome', ['\\do$<Np}5JD/\\SsS\\/DJ5}pN<$od\\&IKl&CL}zQ9&2N:N2&9Qz}LC&lKI&'], {}, True),
              ('is_two_palindrome', ["/By4ghHnLWOq+@%&@+pOWLnGhg4yB/8d5au'ITB>D30RddR03D>CTI'ua5d8"], {}, False),
              ('is_two_palindrome', ['6O-p3q^)ARv{RUccTR{vRA)^q3p-O6x(,rgzGcv6z^~A[[A~^z6vcGzgr,(x'], {}, False),
              ('is_two_palindrome', ['pW=j+Wv3U4J]M!JJ!M]J4U3vW+j=Wp:vRE19j.~a7@z4;;4z@7a~.j91ERv:'], {}, True),
              ('is_two_palindrome', ['{o!]h1-rK*/]9JJJJ9]/*Kr-1h]!o{fd./h<7--r%`+bZZb+`%r--6<h/.df'], {}, False),
              ('is_two_palindrome', ['Ye4B_>`!#DnJCYttYCJnD#!`>_B4eY(SURDYT36fqfbxCCxbfqf63TYDRUS('], {}, True),
              ('is_two_palindrome', ["d&F5Ze2q![sj%r;;r%js[!q2eZ5F&dBN*h{(=@.Z%Gg'xx'gG%Z.@=({h*NB"], {}, True),
              ('is_two_palindrome', ["@Ley32XZGKKGZW23xeL@NP3c?'WA3kDDk3AV'?c3P"], {}, False),
              ('is_two_palindrome', ['}#Y8hg`|SxxS|`gh8Y#}Q0W9<j|*!P..P!*|j<9W0'], {}, True),
              ('is_two_palindrome', [';op{VjeQ!33!QejV{po;&4|9R!<M)hwwh)M<!R9|4'], {}, True),
              ('is_two_palindrome', ['iptH7LF,&$$&,FM7HtpigrESqccJ,\\ff\\,JccqSEr'], {}, False),
              ('is_two_palindrome', ['6u6:IH+!|pp|!+HI:6u6jH6u_f(o(P!!P(o(f_t6H'], {}, False),
              ('is_two_palindrome', ['/bc(_}eM<,,<Me}_(cb/RrGYL/f2yJnnJy2f/LYGr'], {}, True),
              ('is_two_palindrome', ['O@6|_opj|[|jpo_|6@O`8<"og8l$}o}$l8go"<8'], {}, True),
              ('is_two_palindrome', ['Q}7,`7Rh@y@hR7`,7}Q~:,Jvrx)d!v!d)wrvJ,:'], {}, False),
              ('is_two_palindrome', ['+Fc4@-#;igi;#-@3cF+}X%]7FN(w:$:w(NF7]%X'], {}, False),
              ('is_two_palindrome', ["Y{b'#uj#J_J#ju#'b{Y-@g}TO.x1%W%1x.OT}g@"], {}, True),
              ('is_two_palindrome', ["OVZGYy&PotoP&yYGZVOertNcm'@xMQMx@'mcNtr"], {}, True),
              ('is_two_palindrome', ["/Bb=7|g-JNJ-g|7=bB.)t'(OqthO-m-OhsqO('t"], {}, False),
              ]

unisort = [('uni_sort', [[1,2,3],[3,5,-1,5,2,7]],{},[-1,1,2,3,5,7]),
           ('uni_sort', [[3,5,-1,5,2,7],[1,2,3]],{},[-1,1,2,3,5,7]),
           ('uni_sort', [[3,5,-1,5,2,7],[]],{},[-1,2,3,5,7]),
           ('uni_sort', [[1,2,3],[]],{},[1,2,3]),
           ('uni_sort', [[],[3,5,-1,5,2,7]],{},[-1,2,3,5,7]),
           ('uni_sort', [[],[1,2,3]],{},[1,2,3]),
           ('uni_sort', [[],[]],{},[]),
           ('uni_sort', [[1,2,3],[4,5,6]],{},[1,2,3,4,5,6]),
           ('uni_sort', [[4,5,6],[1,2,3]],{},[1,2,3,4,5,6]),
           ('uni_sort', [[0],[]],{},[0]),
           ('uni_sort', [[1,1],[]],{},[1]),
           ('uni_sort', [[],[2]],{},[2]),
           ('uni_sort', [[],[3,3]],{},[3]),
           ('uni_sort', [[4],[4]],{},[4]),
           ('uni_sort', [[5,5],[5,5]],{},[5]),
           ('uni_sort', [[-3, 5, -9, -9, -3, -7, 8, 2, 4, 5], [4, 3, -3, -8, 4, 2, 8, 4, 4, -1]], {}, [-9, -8, -7, -3, -1, 2, 3, 4, 5, 8]),
           ('uni_sort', [[-5, 2, 4, 3, 3, -4, 2, -3, 0, -9], [-1, 7, -10, -1, 8, -3, -10, 9, 7, -9]], {}, [-10, -9, -5, -4, -3, -1, 0, 2, 3, 4, 7, 8, 9]),
           ('uni_sort', [[-4, 2, 2, 4, 6, 7, -7, 9, -3, 9], [-8, 0, -1, 6, 4]], {}, [-8, -7, -4, -3, -1, 0, 2, 4, 6, 7, 9]),
           ('uni_sort', [[-5, 10, 6, -7, 9, 7, -2, 4, 7, -6], [1, -6, 6, 4, 8]], {}, [-7, -6, -5, -2, 1, 4, 6, 7, 8, 9, 10]),
           ('uni_sort', [[1, -1, 10, 4, -6], [0, 10, -3, -8, -4, 7, -6, -1, 1, -5]], {}, [-8, -6, -5, -4, -3, -1, 0, 1, 4, 7, 10]),
           ('uni_sort', [[-5, 10, 6, 2, -2], [8, -4, -2, -8, -5, 10, -5, -1, 0, 9]], {}, [-8, -5, -4, -2, -1, 0, 2, 6, 8, 9, 10]),
           ('uni_sort', [[-9, 10, 17, -4, -12, -5, 13, -14, -12, -11, 0, -14, 0, -16, -14, 15, 0, 4, 4, 13, 12, 0, 11, 4, -4, 19, 17, 4, -10, -4, 6, 5, -13, 13, -17, 8, -7, 3, -17, 11, -14, 18, -16, -8, -7, -8, 16, -20, -16, -12], [1, 1, 9, -2, 20, 14, -14, 13, -7, -2, 7, -12, -16, 11, 10, 10, -14, 16, -11, -6, 11, -17, 8, 10, 16, -8, -10, -8, -2, 1, 0, -8, 20, 13, -18, 4, -1, -10, 2, 4, 2, -6, 12, -14, 20, 11, -1, 10, 12, -6]], {}, [-20, -18, -17, -16, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]),
           ('uni_sort', [[15, -5, 6, -5, -12, 1, -12, 0, 3, -6, 16, -2, -17, -12, 10, 11, 8, 15, 18, -12, -18, -11, 1, 17, -16, -7, 15, -20, 3, 13, -20, -15, -8, -8, 10, -12, 17, -5, 19, -13, 10, 8, -18, 6, -9, 13, 15, 13, -8, -13], [-2, 7, -17, 6, -14, 16, 20, 20, -3, 7, -15, -4, -13, 13, -1, 16, 8, -2, -8, 17, -20, -3, 14, 9, -1, -6, -12, 11, 4, 13, 19, -3, 17, -18, -10, 12, 10, -15, 12, -1, -2, 15, -4, 6, -5, 7, -17, 20, -12, 15]], {}, [-20, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]),
           ('uni_sort', [[-3, 1, 6, 8, 19, -2, -10, -14, 15, -2, 12, 11, -10, -11, -4, 19, 11, -16, 1, 13, -10, -9, 0, 5, 10, 17, -18, 12, -6, 2, -11, -10, -5, -20, -5, 10, 4, -11, 5, -14, 20, 17, 17, 4, 0, 12, 10, -19, -12, 15], [-6, 10, 8, -13, 10, 1, 8, -1, 20, -6, -9, 18, -14, -11, -5, -9, -20, 17, -11, -20, -10, -20, 2, -4, -8, -7, -10, -10, 9, 2, 6, -5, -1, -20, -14, 13, -1, 13, 5, -4, -4, 15, 10, 16, 5, 4, -19, -7, -13, 0]], {}, [-20, -19, -18, -16, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20]),
           ('uni_sort', [[-13, -15, -11, -10, 9, -18, 15, 9, 10, -20, 6, 6, -3, 19, 4, 6, -5, 16, 3, 5, 18, -8, 19, -10, -15, -8, -1, -8, -16, -12, -18, 7, -9, 19, -14, 10, 14, -3, -4, 13, -12, 9, -19, -2, -20, 9, -4, 14, -3, 14], [-17, -8, 10, -5, 6, -10, 0, -17, 16, 6, -13, -7, -16, -11, -17, -4, -19, -11, -1, 14, -5, 9, -11, -18, 9, 12, 8, 14, 3, -7, 12, -3, -8, -8, -9, 16, -19, 1, -9, -1, 7, -5, -19, 0, -10, 10, 9, -11, -4, -14]], {}, [-20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -5, -4, -3, -2, -1, 0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 18, 19]),
           ('uni_sort', [[0.7779476385427712, 0.0955427771384133, 0.9896595289550668, 0.9231791183264543, 0.8583021748011377], [0.7522406037800887, 0.8460367598498997, 0.16192463574133975, 0.7293383676214349, 0.4916268240821068]], {}, [0.0955427771384133, 0.16192463574133975, 0.4916268240821068, 0.7293383676214349, 0.7522406037800887, 0.7779476385427712, 0.8460367598498997, 0.8583021748011377, 0.9231791183264543, 0.9896595289550668]),
           ('uni_sort', [[0.029505670524640815, 0.23135918257094068, 0.7186164634690481, 0.011301766769766242, 0.4822801168425287], [0.187784989252329, 0.9049936908655347, 0.2629432386399718, 0.3206211260134241, 0.4594585305937624]], {}, [0.011301766769766242, 0.029505670524640815, 0.187784989252329, 0.23135918257094068, 0.2629432386399718, 0.3206211260134241, 0.4594585305937624, 0.4822801168425287, 0.7186164634690481, 0.9049936908655347]),
           ]

dotproduct = [('dot_product',[[1,2,3],[2,0,0]],{},2),
              ('dot_product',[[1,2,3],[2]],{},2),
              ('dot_product',[[1,2,3],[]],{},0),
              ('dot_product',[[2,0,0],[1,2,3]],{},2),
              ('dot_product',[[2],[1,2,3]],{},2),
              ('dot_product',[[],[1,2,3]],{},0),
              ('dot_product',[[],[]],{},0),
              ('dot_product',[[0],[]],{},0),
              ('dot_product',[[],[0]],{},0),
              ('dot_product',[[2],[1]],{},2),
              ('dot_product',[[1,2,3],[2,4,5]],{},25),
              ('dot_product',[[2,4,5],[1,2,3]],{},25),
              ('dot_product',[[-1,-2,-3],[2,4,5]],{},-25),
              ('dot_product',[[-2,-4,-5],[1,2,3]],{},-25),
              ('dot_product',[[1,2,3],[-2,-4,-5]],{},-25),
              ('dot_product',[[2,4,5],[-1,-2,-3]],{},-25),
              ('dot_product',[[-1,-2,-3],[-2,-4,-5]],{},25),
              ('dot_product',[[-2,-4,-5],[-1,-2,-3]],{},25),
              ('dot_product',[[1j,2j,3j],[2,4,5]],{},25j),
              ('dot_product',[[2j,4j,5j],[1,2,3]],{},25j),
              ('dot_product',[[1,2,3],[2j,4j,5j]],{},25j),
              ('dot_product',[[2,4,5],[1j,2j,3j]],{},25j),
              ('dot_product',[[1j,2j,3j],[2j,4j,5j]],{},-25),
              ('dot_product',[[2j,4j,5j],[1j,2j,3j]],{},-25),
              ('dot_product',[[1,2,3],[2,4,5]],{},25),
              ('dot_product',[[2,4,5],[1,2,3]],{},25),
              ('dot_product',[[1,2,3],[2,4,5]],{},25),
              ('dot_product',[[2,4,5],[1,2,3]],{},25),
              ('dot_product',[[1,2,3],[2,4,5]],{},25),
              ('dot_product',[[2,4,5],[1,2,3]],{},25),
              ('dot_product',[[1,2,3],[2,4,5]],{},25),
              ('dot_product',[[2,4,5],[1,2,3]],{},25),
              ('dot_product', [[5, -4, 10, -9, -4, 1, -10, -4, -10, 8], [10, 7, -9, -10, 3, 0, -1, 2, -2, 5]], {}, 72),
              ('dot_product', [[6, -2, -5, 1, -5, 4, -3, 3, 3, 7], [-4, 10, 6, -7, 5, 10, 7, -9, -9, -7]], {}, -190),
              ('dot_product', [[1, 6, -6, -6, -7, 5, 8, 0, 6, 9], [8, 2, -5, -5, -2, 10, -4, 9, 0, -7]], {}, 49),
              ('dot_product', [[9, 10, -2, 9, -10, -10, -10, 9, -9, -1], [-4, -2, -10, -5, 9, 2, -3, -4, -7, 5]], {}, -139),
              ('dot_product', [[-9, 0, -3, -7, 1], [5, 2, 1, -1, 3, -2, -7, 6, 2, 7]], {}, -38),
              ('dot_product', [[9, 8, 0, -3, -2], [6, -1, 3, -10, -5, 6, -4, 9, 0, 4]], {}, 86),
              ('dot_product', [[5, 0, -4, -3, -5], [1, 5, 6, 7, -5, 6, -4, 3, -4, 3]], {}, -15),
              ('dot_product', [[4, -3, 8, -4, 6], [5, -2, -10, -9, -3, 3, 7, 1, 0, -6]], {}, -36),
              ('dot_product', [[10, 4, 6, -2, -6, 2, 0, 6, 5, -1], [8, 10, -5, -8, 1]], {}, 100),
              ('dot_product', [[10, 0, 3, -4, 5, -5, 6, 1, 6, -6], [6, 6, -10, -9, 10]], {}, 116),
              ('dot_product', [[3, -5, 6, 2, 10, 6, 2, 5, -4, 10], [5, 9, -8, -2, 6]], {}, -22),
              ('dot_product', [[7, 3, 5, 2, -7, 2, -5, 0, 6, 5], [3, -3, -10, 2, -3]], {}, -13),
              ('dot_product', [[0.5854505872740929, 0.6863590451179876, 0.6288025595182163, 0.576836078752996, 0.9009671980718588], [0.5985566034585903, 0.5594287440146931, 0.009887631680786657, 0.7012414691735164, 0.5491080972116916]], {}, 1.6398414247939788),
              ('dot_product', [[0.0028330376792090606, 0.10682618621790729, 0.46184012013649034, 0.5162847776217675, 0.791734422087593], [0.8396613213269499, 0.09996274188122511, 0.346041911914034, 0.2873401817152086, 0.6110048347033327]], {}, 0.8049763903259914),
              ]

intersection = [('list_intersection',[[1,-1,4,5,1],[-1,1,3,4,3,4]],{},[-1,1,4]),
                ('list_intersection',[[],[]],{},[]),
                ('list_intersection',[[],[-1,1,3,4,3,4]],{},[]),
                ('list_intersection',[[1,-1,4,5,1],[]],{},[]),
                ('list_intersection',[[1,2,3],[1,2,3]],{},[1,2,3]),
                ('list_intersection',[[3,2,1],[1,2,3]],{},[1,2,3]),
                ('list_intersection',[[3,2,1],[3,2,1]],{},[1,2,3]),
                ('list_intersection',[[1,2,3],[1,2,3,4,5,6]],{},[1,2,3]),
                ('list_intersection',[[4,5,6],[1,2,3,4,5,6]],{},[4,5,6]),
                ('list_intersection',[[2,4,5],[1,2,3,4,5,6]],{},[2,4,5]),
                ('list_intersection',[[1,2,3,4,5,6],[1,2,3]],{},[1,2,3]),
                ('list_intersection',[[1,2,3,4,5,6],[4,5,6]],{},[4,5,6]),
                ('list_intersection',[[1,2,3,4,5,6],[2,4,5]],{},[2,4,5]),
                ('list_intersection', [[-6, -6, -5, -3, 2, -2, 0, 2, 6, -2], [-3, -6, -2, -2, 6, -2, -2, -3, 0, -5]], {}, [-6, -5, -3, -2, 0, 6]),
                ('list_intersection', [[4, -2, 4, 2, 1, 4, 2, -1, 6, 5], [6, 5, 5, -2, 2, 2, 3, 3, 6, -6]], {}, [-2, 2, 5, 6]),
                ('list_intersection', [[0, 4, 4, 5, -5, 4, 4, 2, -5, -6], [-2, 3, 5, 3, 5, 2, 2, -5, -6, 4]], {}, [-6, -5, 2, 4, 5]),
                ('list_intersection', [[4, -2, 3, 5, 6, 3, -6, 6, -1, -2], [-6, 5, 0, -2, 0, -2, 6, 3, 5, 0]], {}, [-6, -2, 3, 5, 6]),
                ('list_intersection', [[-1, 1, 6, 2, 5], [0, -3, 2, -6, -1, -1, 2, -5, 5, 4]], {}, [-1, 2, 5]),
                ('list_intersection', [[1, 4, -2, -5, -1], [-3, -1, -5, -6, -6, -5, -2, -3, -3, -5]], {}, [-5, -2, -1]),
                ('list_intersection', [[0, -1, -1, -6, 5, 6, 3, -3, -6, 6], [-5, 5, -4, 4, -2]], {}, [5]),
                ('list_intersection', [[-2, -4, 6, -5, -2, -4, 2, -1, 3, -3], [-5, -2, -3, 2, -1]], {}, [-5, -3, -2, -1, 2]),
                ('list_intersection', [[-1, -0.75, -1, -0.75, 0.5], [-0.75, -0.25, 0, 0, -0.75]], {}, [-0.75]),
                ('list_intersection', [[-0.25, 0.25, -1, 0.75, -0.75], [-0.75, 0, -0.25, 0.5, 0]], {}, [-0.75, -0.25]),
                ('list_intersection', [[1, 0.5, -0.75, -0.25, 1], [-0.5, 0.5, -0.25, 0.75, -0.75]], {}, [-0.75, -0.25, 0.5]),
                ('list_intersection', [[1, 1, -1, 1, 0.75], [-0.25, -0.5, 1, 0.5, 0.25]], {}, [1]),               
                ]

difference = [('list_difference',[[1,-1,4,5,1],[-1,1,3,4,3,4]],{},[3,5]),
              ('list_difference',[[],[]],{},[]),
              ('list_difference',[[],[-1,1,3,4,3,4]],{},[-1,1,3,4]),
              ('list_difference',[[1,-1,4,5,1],[]],{},[-1,1,4,5]),
              ('list_difference',[[1,2,3],[1,2,3]],{},[]),
              ('list_difference',[[3,2,1],[1,2,3]],{},[]),
              ('list_difference',[[3,2,1],[3,2,1]],{},[]),
              ('list_difference',[[1,2,3],[1,2,3,4,5,6]],{},[4,5,6]),
              ('list_difference',[[4,5,6],[1,2,3,4,5,6]],{},[1,2,3]),
              ('list_difference',[[2,4,5],[1,2,3,4,5,6]],{},[1,3,6]),
              ('list_difference',[[1,2,3,4,5,6],[1,2,3]],{},[4,5,6]),
              ('list_difference',[[1,2,3,4,5,6],[4,5,6]],{},[1,2,3]),
              ('list_difference',[[1,2,3,4,5,6],[2,4,5]],{},[1,3,6]),
              ('list_difference', [[-3, -4, -5, -6, -6, -5, -6, 0, 2, 0], [-1, 0, 1, -6, 6, -6, -4, 6, -5, 4]], {}, [-3, -1, 1, 2, 4, 6]),
              ('list_difference', [[-4, -6, 4, 3, -3, -6, 6, -1, -6, -6], [-4, 6, 2, -2, 6, 3, 0, 4, 6, -2]], {}, [-6, -3, -2, -1, 0, 2]),
              ('list_difference', [[-3, -1, 1, 2, -2, -4, -1, 5, -5, 5], [0, -4, -2, -1, 6, -4, 4, -4, 3, -2]], {}, [-5, -3, 0, 1, 2, 3, 4, 5, 6]),
              ('list_difference', [[1, -3, 2, 5, 6, -6, -2, -5, 4, -6], [-6, -5, 5, 6, 5, -6, -5, -2, -5, -2]], {}, [-3, 1, 2, 4]),
              ('list_difference', [[-4, -1, 6, 2, -6, -1, -4, 0, 0, -2], [6, 3, -6, 5, -1]], {}, [-4, -2, 0, 2, 3, 5]),
              ('list_difference', [[-3, -4, -5, -6, -6, -5, -6, 0, 2, 0], [-1, 0, 1, -6, 6, -6, -4, 6, -5, 4]], {}, [-3, -1, 1, 2, 4, 6]),
              ('list_difference', [[-1, -6, -6, 1, -6], [-2, 0, 3, 6, 5, -4, -3, -4, 5, 6]], {}, [-6, -4, -3, -2, -1, 0, 1, 3, 5, 6]),
              ('list_difference', [[5, 5, 5, -1, 1], [6, -5, -2, -1, -3, -6, 1, -5, 5, -5]], {}, [-6, -5, -3, -2, 6]),
              ('list_difference', [[-0.75, 0.25, -0.5, 0.5, -0.25], [1, 1, -0.5, 0, 0.75]], {}, [-0.75, -0.25, 0, 0.25, 0.5, 0.75, 1]),
              ('list_difference', [[-0.75, -0.5, 0.25, 0.75, -0.75], [0, -0.5, -0.75, -0.25, 0.5]], {}, [-0.25, 0, 0.25, 0.5, 0.75]),
              ('list_difference', [[-1, 0.75, -0.25, 0, 0.25], [-1, -0.25, 0, -0.5, -1]], {}, [-0.5, 0.25, 0.75]),
              ('list_difference', [[-1, 0, 0.5, 0, 1], [0.25, -0.25, -0.25, 1, -1]], {}, [-0.25, 0, 0.25, 0.5]),
              ]

wordmap = [('word_mapper',['The cat. is the cAt'],{},{'the':2,'cat':2,'is':1}),
           ('word_mapper',['The cat.is!the@cAt'],{},{'the':2,'cat':2,'is':1}),
           ('word_mapper',['The cat. is\n the\n\n cAt'],{},{'the':2,'cat':2,'is':1}),
           ('word_mapper',['  \t The cat. is\n the\n\n cAt'],{},{'the':2,'cat':2,'is':1}),
           ('word_mapper',['The cat. is\n the\n\n cAt    \t\n'],{},{'the':2,'cat':2,'is':1}),
           ('word_mapper',['The '],{},{'the':1}),
           ('word_mapper',['The 12 12'],{},{'the':1,'12':2}),
           ('word_mapper',['T1h2e '],{},{'t1h2e':1}),
           ('word_mapper',['The.? '],{},{'the':1}),
           ('word_mapper',[''],{},{}),
           ('word_mapper',['      \t\t \t \t'],{},{}),
           ('word_mapper',['   \n   \t\t \t \n\t'],{},{}),
           ('word_mapper',[' ,,. . \n!!!   @@@\t##\t \t \n\t'],{},{}),
           ('word_mapper',[' \t\n\r\x0b\x0c!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~'],{},{}),
           ]

from adventures import texts,wordmaps
wordlong = [('word_mapper',[text],{},wordmap ) for (text,wordmap) in zip(texts,wordmaps)]

def makedict(l):
    return {name:eval(name) for name in l}

oset=makedict(["palindrome",
               "unisort",
               "dotproduct",
               "intersection",
               "difference",
               "wordmap",      
               ])

lset=makedict(["wordlong",])

def f1(n):
    return 0

def f2(n):
    return n

def f3(n):
    return 2*n

def f4(n):
    return n[1],n[0]+n[1]

def binary_search(f,target):
    def g(n):
        if f(n[0]) > target:
            return 2*n[0] - n[1],n[1]
        if f(n[1]) < target:
            return n[0],2*n[1] - n[0]
        mid = (n[0]+n[1]) / 2
        return (n[0],mid) if f(mid) > target else (mid,n[1])
    return g

from math import pi
generator = [('gimme_a_value',[f1,0],{'_length':10},[0,0,0,0,0,0,0,0,0,0]),
             ('gimme_a_value',[f1,1],{'_length':10},[1,0,0,0,0,0,0,0,0,0]),
             ('gimme_a_value',[f1,10],{'_length':10},[10,0,0,0,0,0,0,0,0,0]),
             ('gimme_a_value',[f2,0],{'_length':10},[0,0,0,0,0,0,0,0,0,0]),
             ('gimme_a_value',[f2,1],{'_length':10},[1,1,1,1,1,1,1,1,1,1]),
             ('gimme_a_value',[f2,10],{'_length':10},[10,10,10,10,10,10,10,10,10,10]),
             ('gimme_a_value',[f3,0],{'_length':10},[0,0,0,0,0,0,0,0,0,0]),
             ('gimme_a_value',[f3,1],{'_length':10},[1,2,4,8,16,32,64,128,256,512]),
             ('gimme_a_value',[f3,10],{'_length':10},[10,20,40,80,160,320,640,1280,2560,5120]),
             ('gimme_a_value',[f4,(0,0)],{'_length':10},[(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0)]),
             ('gimme_a_value',[f4,(0,1)],{'_length':10},[(0,1),(1,1),(1,2),(2,3),(3,5),(5,8),(8,13),(13,21),(21,34),(34,55)]),
             ('gimme_a_value',[f4,(2,1)],{'_length':10},[(2,1),(1,3),(3,4),(4,7),(7,11),(11,18),(18,29),(29,47),(47,76),(76,123)]),
             ('gimme_a_value',[binary_search(f2,pi),(0,1)],{'_length':10},[(0,1),(0,2),(0,4),(2,4),(3,4),(3,3.5),(3,3.25),(3.125,3.25),(3.125,3.1875),(3.125,3.15625)]),
             ('gimme_a_value',[binary_search(f2,pi),(3,4)],{'_length':6},[(3,4),(3,3.5),(3,3.25),(3.125,3.25),(3.125,3.1875),(3.125,3.15625)]),
             ('gimme_a_value',[binary_search(f2,pi),(10,11)],{'_length':10},[(10,11),(9,11),(7,11),(3,11),(3,7),(3,5),(3,4),(3,3.5),(3,3.25),(3.125,3.25)]),
             ]

genexp = [('gimme_a_genexp',[f1,0],{'_length':10},[0,0,0,0,0,0,0,0,0,0]),
          ('gimme_a_genexp',[f1,1],{'_length':10},[1,0,0,0,0,0,0,0,0,0]),
          ('gimme_a_genexp',[f1,10],{'_length':10},[10,0,0,0,0,0,0,0,0,0]),
          ('gimme_a_genexp',[f2,0],{'_length':10},[0,0,0,0,0,0,0,0,0,0]),
          ('gimme_a_genexp',[f2,1],{'_length':10},[1,1,1,1,1,1,1,1,1,1]),
          ('gimme_a_genexp',[f2,10],{'_length':10},[10,10,10,10,10,10,10,10,10,10]),
          ('gimme_a_genexp',[f3,0],{'_length':10},[0,0,0,0,0,0,0,0,0,0]),
          ('gimme_a_genexp',[f3,1],{'_length':10},[1,2,4,8,16,32,64,128,256,512]),
          ('gimme_a_genexp',[f3,10],{'_length':10},[10,20,40,80,160,320,640,1280,2560,5120]),
          ('gimme_a_genexp',[f4,(0,0)],{'_length':10},[(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0)]),
          ('gimme_a_genexp',[f4,(0,1)],{'_length':10},[(0,1),(1,1),(1,2),(2,3),(3,5),(5,8),(8,13),(13,21),(21,34),(34,55)]),
          ('gimme_a_genexp',[f4,(2,1)],{'_length':10},[(2,1),(1,3),(3,4),(4,7),(7,11),(11,18),(18,29),(29,47),(47,76),(76,123)]),
          ('gimme_a_genexp',[binary_search(f2,pi),(0,1)],{'_length':10},[(0,1),(0,2),(0,4),(2,4),(3,4),(3,3.5),(3,3.25),(3.125,3.25),(3.125,3.1875),(3.125,3.15625)]),
          ('gimme_a_genexp',[binary_search(f2,pi),(3,4)],{'_length':6},[(3,4),(3,3.5),(3,3.25),(3.125,3.25),(3.125,3.1875),(3.125,3.15625)]),
          ('gimme_a_genexp',[binary_search(f2,pi),(10,11)],{'_length':10},[(10,11),(9,11),(7,11),(3,11),(3,7),(3,5),(3,4),(3,3.5),(3,3.25),(3.125,3.25)]),
          ]

gset=makedict(["generator",
               "genexp",
               ])

randstr = [('random_string',[0],{},0),
           ('random_string',[1],{},1),
           ('random_string',[4],{},4),
           ('random_string',[10],{},10),
           ('random_string',[1000],{},1000),
           ('random_string',[1000],{},1000),
           ('random_string',[1000],{},1000),
           ('random_string',[1000],{},1000),
           ]

rset=makedict(["randstr",
               ])

del makedict
